program = {
    SOI ~
    function*
    ~ EOI
}

identifier = @{ (ASCII_ALPHA | "_") ~ (ASCII_ALPHANUMERIC | "_")* }

dtype = { ("?"? ~ identifier) | array_type }
array_type = { "[" ~ dtype ~ ";" ~ positive_number ~ "]" }

param = { identifier ~ ":" ~ dtype }
param_list = { "(" ~ (param ~ ("," ~ param)*)? ~ ")" }

return_type = { "->" ~ dtype }

function = {
    "fn" ~ identifier ~ param_list ~ return_type? ~ "{" ~ block ~ "}" 
}

block = {
    (statement | ("{" ~ block ~ "}"))*
}

statement = {
    assign_statement | return_statement | control_statement | if_statement | loop_statement | (expression ~ ";")
}

assign_statement = {
    "let" ~ identifier ~ (":" ~ dtype)? ~ "=" ~ expression ~ ";"
}
return_statement = {
    "return" ~ expression ~ ";"
}

expression = {
    term ~ (binary_op ~ term)*
}

term = _{ invoke | number | boolean | identifier | array | "(" ~ expression ~ ")" }

invoke = { "@"? ~ identifier ~ invoke_param_list }
invoke_param_list = { "(" ~ (expression ~ ("," ~ expression)*) ~ ")"}

positive_number = { '1'..'9' ~ ASCII_DIGIT+ }
number = @{ "-"? ~ ASCII_DIGIT+ }
boolean = @{ "true" | "false" }

if_statement = { if_block ~ else_if_block* ~ else_block? }
if_block = { "if" ~ expression ~ "{" ~ block ~ "}" }
else_if_block = { "else" ~ "if" ~ expression ~ "{" ~ block ~ "}" }
else_block = { "else" ~ "{" ~ block ~ "}" }

loop_statement = { "loop" ~ "{" ~ block ~ "}" }

control_statement = { control_break | control_continue }
control_break = { "break" ~ ";" }
control_continue = { "continue" ~ ";" }

array = {
    list_expression | repeat_expression
}

list_expression = { "[" ~ expression ~ ("," ~ expression)* ~ "]" }
repeat_expression = { "[" ~ expression ~ ";" ~ positive_number ~ "]" }

binary_op = _{
    arithmetic_op | logical_op
}

arithmetic_op = _{ add | subtract | multiply | divide }
logical_op = _{ and | or | equal | not_equal | greater | greater_or_equal | less | less_or_equal }

add = { "+" }
subtract = { "-" }
multiply = { "*" }
divide = { "/" }
and = { "&&" }
or = { "||" }
equal = { "==" }
not_equal = { "!=" }
greater = { ">" }
greater_or_equal = { ">=" }
less = { "<" }
less_or_equal = { "<=" }

WHITESPACE = _{" " | "\t" | "\n" | "\r" }